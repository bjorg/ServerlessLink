Mappings:
  RegionMap:
    us-east-1:
      WebsiteEndpoint: s3-website-us-east-1.amazonaws.com
    us-west-2:
      WebsiteEndpoint: s3-website-us-west-2.amazonaws.com
    us-west-1:
      WebsiteEndpoint: s3-website-us-west-1.amazonaws.com
    eu-west-1:
      WebsiteEndpoint: s3-website-eu-west-1.amazonaws.com
    eu-central-1:
      WebsiteEndpoint: s3-website.eu-central-1.amazonaws.com
    ap-southeast-1:
      WebsiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
    ap-northeast-1:
      WebsiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
    ap-southeast-2:
      WebsiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
    ap-northeast-2:
      WebsiteEndpoint: s3-website.ap-northeast-2.amazonaws.com
    sa-east-1:
      WebsiteEndpoint: s3-website-sa-east-1.amazonaws.co

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: ServerlessLink
    Description: The name of the serverlesss application
  DomainName:
    Type: String
    Default: serverless.link
    Description: The name of the domain for the serverless application
  TableName:
    Type: String
    Default: ServerlessLinkMaps
    Description: The name of the dynamodb table
  PartitionKey:
    Type: String
    Default: LinkId
    Description: The name of the main parition key
  ReadCapacityUnits:
    Default: 1
    Description: Dynamo read capacity units
    Type: Number
  WriteCapacityUnits:
    Default: 1
    Description: Dynamo write capacity units
    Type: Number
  StageName:
    Type: String
    Default: ${self:custom.stageName}

Resources:
  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        Ref: DomainName
      WebsiteConfiguration:
        IndexDocument: index.html

  WebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: DomainName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource:
            Fn::Join: ["", ["arn:aws:s3:::", Ref: DomainName, "/*"]]

  # Certificate for cloud front distribution.
  # This must be approved by admin for the CF template to be successful
  AcmDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Ref: DomainName


  WebsiteCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - Ref: DomainName
        Comment: Created by ÂµServerless
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: WebsiteBucket
          ViewerProtocolPolicy: redirect-to-https
        Enabled: 'true'
        Origins:
        - CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
          DomainName:
            Fn::Join: [".", [Ref: WebsiteBucket, Fn::FindInMap: [RegionMap, Ref: AWS::Region, WebsiteEndpoint]]]
          Id: WebsiteBucket
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Ref: AcmDomainCertificate
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only

  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: ["-", [Ref: EnvironmentName, Ref: ApplicationName, "role"]]
      Path:
        Fn::Join: ["" ,["/", Ref: ApplicationName, "/"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: DestBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - Fn::Join: ["", ["arn:aws:s3:::", Ref: WebsiteBucket]]
                  - Fn::Join: ["", ["arn:aws:s3:::", Ref: WebsiteBucket, "/*"]]

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName

      AttributeDefinitions:
      - AttributeName:
          Ref: PartitionKey
        AttributeType: S

      KeySchema:
      - AttributeName:
          Ref: PartitionKey
        KeyType: HASH

      ProvisionedThroughput:
        ReadCapacityUnits:
          Ref: ReadCapacityUnits
        WriteCapacityUnits:
          Ref: WriteCapacityUnits

      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: true

  AcmApiDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join: [".", ["m", Ref: DomainName]]

  ApiGatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      # Use if you want it to create a cloudfront distribution
      CertificateArn:
        Ref: AcmApiDomainCertificate
      EndpointConfiguration:
        Types:
          - EDGE
#      RegionalCertificateArn:
#        Ref: AcmApiDomainCertificate
#      EndpointConfiguration:
#        Types:
#        - REGIONAL
      DomainName:
        Fn::Join: [".", ["m", Ref: DomainName]]

  DomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ""
      Stage:
        Ref: StageName
      DomainName:
        Ref: ApiGatewayDomain
      RestApiId:
       Ref: ApiGatewayRestApi

  WebsiteDomainRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Serverless Link webisite domain record set
      HostedZoneName:
        Fn::Join: ["", [Ref: DomainName, "."]]
      RecordSets:
        - AliasTarget:
            DNSName:
              Fn::GetAtt: [WebsiteCloudfrontDistribution, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2  # This is the default hosted zone id for CloudFront
          Name:
            Ref: DomainName
          Type: A

  ApiDomainRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Serverless Link webisite domain record set
      HostedZoneName:
        Fn::Join: ["", [Ref: DomainName, "."]]
      RecordSets:
        - AliasTarget:
            DNSName:
              Fn::GetAtt: [ApiGatewayDomain, DistributionDomainName]
            HostedZoneId: Z2FDTNDATAQYW2  # This is the default hosted zone id for CloudFront
          Name:
            Fn::Join: [".", ["m", Ref: DomainName]]
          Type: A

Outputs:
  EventsJsonArchive:
    Value:
      Ref: DynamoDBTable

